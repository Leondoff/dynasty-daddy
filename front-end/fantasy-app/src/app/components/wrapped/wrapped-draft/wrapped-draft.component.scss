@use 'sass:math';
@use '@angular/material' as mat;
@import "../../../../styles.scss";

.extra-card-padding {
  padding-top: 2vh;
}

body {
  margin: 0;
  overflow: hidden;
}

.background {
  width: 100vw;
  height: 100vh;
  background: mat.get-color-from-palette($mat-primary, darker);
}

$particleSize: 20vmin;
$animationDuration: 6s;
$amount: 10;
.background span {
  width: $particleSize;
  height: $particleSize;
  border-radius: $particleSize;
  backface-visibility: hidden;
  position: absolute;
  animation-name: move;
  animation-duration: $animationDuration;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
  $colors: (
    mat.get-color-from-palette($mat-primary, lighter),
    mat.get-color-from-palette($mat-warn, main),
    mat.get-color-from-palette($mat-accent, main),
    mat.get-color-from-palette($mat-success, main),
  );
  @for $i from 1 through $amount {
    &:nth-child(#{$i}) {
      color: nth($colors, random(length($colors)));
      top: random(100) * 1%;
      left: random(100) * 1%;
      animation-duration: math.div(random($animationDuration * 10), 10) * 1s + 10s;
      animation-delay: math.div(random($animationDuration + 10s * 10), 10) * -1s;
      transform-origin: (random(50) - 25) * 1vw (random(50) - 25) * 1vh;
      $blurRadius: (random() + 0.5) * $particleSize * 0.5;
      $x: if(random() > 0.5, -1, 1);
      box-shadow: ($particleSize * 2 * $x) 0 $blurRadius currentColor;
    }
  }
}

@keyframes move {
  100% {
    transform: translate3d(0, 0, 1px) rotate(360deg);
  }
}
